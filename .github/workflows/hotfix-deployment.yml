name: üö® Hotfix Emergency Deployment

on:
  push:
    branches: [hotfix/**]
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip tests (emergency only)'
        required: false
        default: false
        type: boolean
      deployment_message:
        description: 'Emergency deployment reason'
        required: true
        type: string

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

concurrency:
  group: hotfix-${{ github.ref }}
  cancel-in-progress: false

jobs:
  emergency-validation:
    name: üî• Emergency Validation
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.validation.outputs.should-deploy }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate emergency deployment
        id: validation
        run: |
          echo "üö® Emergency deployment initiated"
          echo "Reason: ${{ github.event.inputs.deployment_message || 'Hotfix branch push' }}"
          echo "Skip tests: ${{ github.event.inputs.skip_tests || 'false' }}"
          echo "should-deploy=true" >> $GITHUB_OUTPUT

      - name: Notify emergency start
        uses: 8398a7/action-slack@v3
        with:
          status: warning
          fields: repo,message,commit,author
          text: |
            üö® **EMERGENCY DEPLOYMENT STARTED**
            Reason: ${{ github.event.inputs.deployment_message || 'Hotfix branch' }}
            Branch: ${{ github.ref_name }}
            Skip Tests: ${{ github.event.inputs.skip_tests || 'false' }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  minimal-build:
    name: ‚ö° Minimal Build Check
    runs-on: ubuntu-latest
    needs: emergency-validation
    if: needs.emergency-validation.outputs.should-deploy == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js & pnpm
        uses: ./.github/actions/setup-node-pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: Quick TypeScript check
        run: pnpm typecheck

      - name: Build application
        run: pnpm build
        env:
          NODE_ENV: production
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

  critical-tests:
    name: üß™ Critical Tests Only
    runs-on: ubuntu-latest
    needs: [emergency-validation, minimal-build]
    if: needs.emergency-validation.outputs.should-deploy == 'true' && github.event.inputs.skip_tests != 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js & pnpm
        uses: ./.github/actions/setup-node-pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: Run critical unit tests
        run: |
          # Run only critical/core tests
          pnpm test --testPathPattern="(auth|api|core)" --maxWorkers=2
        continue-on-error: false

  emergency-deploy:
    name: üöÄ Emergency Deploy to Production
    runs-on: ubuntu-latest
    needs: [minimal-build, critical-tests]
    if: always() && needs.minimal-build.result == 'success' && (needs.critical-tests.result == 'success' || needs.critical-tests.result == 'skipped')
    environment:
      name: production-emergency
      url: https://mysetlist-sonnet.vercel.app
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js & pnpm
        uses: ./.github/actions/setup-node-pnpm

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Create emergency backup
        id: backup
        run: |
          CURRENT_DEPLOYMENT=$(vercel ls --scope ${{ secrets.VERCEL_ORG_ID }} | grep mysetlist | head -1 | awk '{print $1}')
          echo "current=$CURRENT_DEPLOYMENT" >> $GITHUB_OUTPUT
          echo "üîÑ Emergency backup: $CURRENT_DEPLOYMENT"

      - name: Emergency deployment
        id: deploy
        run: |
          cd apps/web
          vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
          vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "üö® Emergency deployed to: $DEPLOYMENT_URL"
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Immediate health check
        run: |
          sleep 30
          curl -f https://mysetlist-sonnet.vercel.app/api/health || {
            echo "‚ùå Emergency deployment health check failed"
            exit 1
          }
          echo "‚úÖ Emergency deployment health check passed"

      - name: Rollback on critical failure
        if: failure()
        run: |
          if [ -n "${{ steps.backup.outputs.current }}" ]; then
            cd apps/web
            vercel alias set ${{ steps.backup.outputs.current }} mysetlist-sonnet.vercel.app --token=${{ secrets.VERCEL_TOKEN }}
            echo "üîÑ Rolled back to: ${{ steps.backup.outputs.current }}"
          fi

  post-emergency-monitoring:
    name: üìä Post-Emergency Monitoring
    runs-on: ubuntu-latest
    needs: [emergency-deploy]
    if: needs.emergency-deploy.result == 'success'
    steps:
      - name: Extended monitoring
        run: |
          echo "üîç Starting 5-minute monitoring period..."
          for i in {1..5}; do
            echo "Monitor check $i/5..."
            curl -f https://mysetlist-sonnet.vercel.app/api/health/comprehensive
            curl -f https://mysetlist-sonnet.vercel.app/api/trending/test
            sleep 60
          done
          echo "‚úÖ 5-minute monitoring completed successfully"

      - name: Alert monitoring team
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author
          text: |
            üéØ **EMERGENCY DEPLOYMENT MONITORING**
            Status: ${{ job.status == 'success' && '‚úÖ Stable' || '‚ùå Issues detected' }}
            URL: https://mysetlist-sonnet.vercel.app
            Action Required: ${{ job.status == 'success' && 'Continue monitoring' || 'Immediate investigation needed' }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  notify-emergency-completion:
    name: üì¢ Emergency Deployment Complete
    runs-on: ubuntu-latest
    needs: [emergency-deploy, post-emergency-monitoring]
    if: always()
    steps:
      - name: Create emergency report
        run: |
          echo "## üö® Emergency Deployment Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Reason**: ${{ github.event.inputs.deployment_message || 'Hotfix branch deployment' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Tests Skipped**: ${{ github.event.inputs.skip_tests || 'false' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.minimal-build.result == 'success' && '‚úÖ' || '‚ùå' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.critical-tests.result == 'success' && '‚úÖ' || (needs.critical-tests.result == 'skipped' && '‚è≠Ô∏è' || '‚ùå') }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Deploy | ${{ needs.emergency-deploy.result == 'success' && '‚úÖ' || '‚ùå' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Monitor | ${{ needs.post-emergency-monitoring.result == 'success' && '‚úÖ' || '‚ùå' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üåê **Production URL**: https://mysetlist-sonnet.vercel.app" >> $GITHUB_STEP_SUMMARY

      - name: Final emergency notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ needs.emergency-deploy.result == 'success' && 'success' || 'failure' }}
          fields: repo,message,commit,author,took
          text: |
            üèÅ **EMERGENCY DEPLOYMENT COMPLETE**
            Status: ${{ needs.emergency-deploy.result == 'success' && '‚úÖ Success' || '‚ùå Failed' }}
            Reason: ${{ github.event.inputs.deployment_message || 'Hotfix branch' }}
            Monitoring: ${{ needs.post-emergency-monitoring.result == 'success' && '‚úÖ Stable' || '‚ö†Ô∏è Needs attention' }}
            
            ${{ needs.emergency-deploy.result == 'success' && '**Action**: Continue monitoring for 24h' || '**Action**: Immediate investigation required' }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}