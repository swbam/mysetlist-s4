name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
          - development

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '10.12.4'

jobs:
  # Pre-deployment validation
  pre-deploy-checks:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    outputs:
      deploy-version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Generate deployment version
        id: version
        run: |
          VERSION="${{ github.sha }}-$(date +%Y%m%d-%H%M%S)"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Deployment version: $VERSION"
      
      - name: Check deployment branch
        if: github.event_name == 'push'
        run: |
          if [[ "${{ github.ref }}" != "refs/heads/main" ]]; then
            echo "❌ Deployment only allowed from main branch"
            exit 1
          fi
      
      - name: Verify CI passed
        uses: actions/github-script@v7
        with:
          script: |
            const { data: checkRuns } = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              status: 'completed'
            });
            
            const ciRun = checkRuns.check_runs.find(run => 
              run.name === 'CI Pipeline' && run.conclusion === 'success'
            );
            
            if (!ciRun) {
              core.setFailed('CI Pipeline must pass before deployment');
            }
  
  # Database backup before deployment
  database-backup:
    name: Database Backup
    runs-on: ubuntu-latest
    needs: [pre-deploy-checks]
    if: github.event.inputs.environment == 'production' || github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client
      
      - name: Backup production database
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
        run: |
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          pg_dump "$DATABASE_URL" | gzip > "backup-$TIMESTAMP.sql.gz"
          
          # Upload to S3 or other backup storage
          echo "Database backup created: backup-$TIMESTAMP.sql.gz"
      
      - name: Upload backup artifact
        uses: actions/upload-artifact@v4
        with:
          name: database-backup-${{ needs.pre-deploy-checks.outputs.deploy-version }}
          path: backup-*.sql.gz
          retention-days: 30
  
  # Deploy to Vercel
  deploy-vercel:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: [pre-deploy-checks, database-backup]
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
      
      - run: pnpm install --frozen-lockfile
      
      - name: Deploy to Vercel
        id: deploy
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          if [[ "${{ github.event.inputs.environment || 'production' }}" == "production" ]]; then
            URL=$(pnpm vercel --prod --yes --token=$VERCEL_TOKEN)
          else
            URL=$(pnpm vercel --yes --token=$VERCEL_TOKEN)
          fi
          echo "url=$URL" >> $GITHUB_OUTPUT
          echo "Deployed to: $URL"
      
      - name: Create deployment record
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: '${{ github.event.inputs.environment || 'production' }}',
              description: 'Deployment version: ${{ needs.pre-deploy-checks.outputs.deploy-version }}',
              auto_merge: false,
              required_contexts: []
            });
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: 'success',
              environment_url: '${{ steps.deploy.outputs.url }}',
              description: 'Deployment completed successfully'
            });
  
  # Run database migrations
  database-migrations:
    name: Database Migrations
    runs-on: ubuntu-latest
    needs: [deploy-vercel]
    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
      
      - run: pnpm install 
      
      - name: Run migrations
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
        run: |
          cd packages/database
          pnpm migrate:deploy
  
  # Post-deployment health checks
  health-checks:
    name: Health Checks
    runs-on: ubuntu-latest
    needs: [deploy-vercel, database-migrations]
    steps:
      - uses: actions/checkout@v4
      
      - name: Wait for deployment
        run: sleep 60
      
      - name: Health check - API
        run: |
          DEPLOYMENT_URL="${{ needs.deploy-vercel.outputs.url || 'https://mysetlist.app' }}"
          for i in {1..30}; do
            if curl -f "$DEPLOYMENT_URL/api/health" > /dev/null 2>&1; then
              echo "✅ API health check passed"
              break
            fi
            echo "Attempt $i failed, retrying in 10 seconds..."
            sleep 10
          done
      
      - name: Health check - Database
        run: |
          DEPLOYMENT_URL="${{ needs.deploy-vercel.outputs.url || 'https://mysetlist.app' }}"
          curl -f "$DEPLOYMENT_URL/api/health/db" || exit 1
          echo "✅ Database health check passed"
      
      - name: Run smoke tests
        run: |
          DEPLOYMENT_URL="${{ needs.deploy-vercel.outputs.url || 'https://mysetlist.app' }}"
          
          # Test critical pages
          PAGES=("/" "/trending" "/artists" "/shows")
          for page in "${PAGES[@]}"; do
            if curl -f "$DEPLOYMENT_URL$page" > /dev/null 2>&1; then
              echo "✅ Page $page is accessible"
            else
              echo "❌ Page $page failed"
              exit 1
            fi
          done
  
  # Performance validation
  performance-validation:
    name: Performance Validation
    runs-on: ubuntu-latest
    needs: [health-checks]
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Lighthouse performance test
        uses: treosh/lighthouse-ci-action@v11
        with:
          urls: |
            ${{ needs.deploy-vercel.outputs.url || 'https://mysetlist.app' }}
            ${{ needs.deploy-vercel.outputs.url || 'https://mysetlist.app' }}/trending
          uploadArtifacts: true
          temporaryPublicStorage: true
      
      - name: Check Core Web Vitals
        run: |
          # Add Core Web Vitals validation script
          echo "Checking Core Web Vitals..."
  
  # Rollback capability
  rollback-on-failure:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy-vercel, database-migrations, health-checks]
    if: failure()
    steps:
      - name: Rollback Vercel deployment
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          echo "⚠️ Deployment failed, initiating rollback..."
          pnpm vercel rollback --yes --token=$VERCEL_TOKEN
      
      - name: Restore database backup
        if: github.event.inputs.environment == 'production' || github.ref == 'refs/heads/main'
        run: |
          echo "Restoring database from backup..."
          # Add database restoration logic
      
      - name: Notify team
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: '❌ Deployment failed and has been rolled back. Please check the logs.'
            });
  
  # Post-deployment tasks
  post-deployment:
    name: Post Deployment
    runs-on: ubuntu-latest
    needs: [health-checks, performance-validation]
    if: success()
    steps:
      - name: Clear CDN cache
        run: |
          echo "Clearing CDN cache..."
          # Add CDN cache clearing logic for Cloudflare/Vercel Edge
      
      - name: Warm application cache
        run: |
          DEPLOYMENT_URL="${{ needs.deploy-vercel.outputs.url || 'https://mysetlist.app' }}"
          curl -X POST "$DEPLOYMENT_URL/api/cron/cache-warm"
      
      - name: Update monitoring
        run: |
          echo "Updating monitoring dashboards..."
          # Update Sentry release
          # Update monitoring tags
      
      - name: Send deployment notification
        if: always()
        run: |
          if [[ "${{ job.status }}" == "success" ]]; then
            MESSAGE="✅ Deployment successful! Version: ${{ needs.pre-deploy-checks.outputs.deploy-version }}"
          else
            MESSAGE="❌ Deployment failed! Check the logs for details."
          fi
          
          # Send Slack notification
          if [[ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]]; then
            curl -X POST -H 'Content-type: application/json' \
              --data "{\"text\":\"$MESSAGE\"}" \
              "${{ secrets.SLACK_WEBHOOK_URL }}"
          fi
      
      - name: Create release notes
        uses: actions/github-script@v7
        with:
          script: |
            const release = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `v${{ needs.pre-deploy-checks.outputs.deploy-version }}`,
              name: `Release ${{ needs.pre-deploy-checks.outputs.deploy-version }}`,
              body: `Deployment to ${{ github.event.inputs.environment || 'production' }} completed successfully.`,
              draft: false,
              prerelease: false
            });