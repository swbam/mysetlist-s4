name: Branch Name Validation

on:
  pull_request:
    types: [opened, edited, synchronize]

jobs:
  validate-branch:
    runs-on: ubuntu-latest
    steps:
      - name: Check branch naming convention
        run: |
          BRANCH_NAME="${{ github.head_ref }}"
          
          # Define valid branch prefixes
          VALID_PREFIXES="^(feature|bugfix|hotfix|release|chore|docs|test|refactor|perf|style|ci|revert)/"
          
          # Check if branch name matches convention
          if [[ ! "$BRANCH_NAME" =~ $VALID_PREFIXES ]]; then
            echo "::error::Branch name '$BRANCH_NAME' does not follow naming convention"
            echo "## ❌ Invalid Branch Name" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Branch name must start with one of the following prefixes:" >> $GITHUB_STEP_SUMMARY
            echo "- \`feature/\` - New features" >> $GITHUB_STEP_SUMMARY
            echo "- \`bugfix/\` - Bug fixes" >> $GITHUB_STEP_SUMMARY
            echo "- \`hotfix/\` - Urgent production fixes" >> $GITHUB_STEP_SUMMARY
            echo "- \`release/\` - Release preparation" >> $GITHUB_STEP_SUMMARY
            echo "- \`chore/\` - Maintenance tasks" >> $GITHUB_STEP_SUMMARY
            echo "- \`docs/\` - Documentation updates" >> $GITHUB_STEP_SUMMARY
            echo "- \`test/\` - Test additions or fixes" >> $GITHUB_STEP_SUMMARY
            echo "- \`refactor/\` - Code refactoring" >> $GITHUB_STEP_SUMMARY
            echo "- \`perf/\` - Performance improvements" >> $GITHUB_STEP_SUMMARY
            echo "- \`style/\` - Code style changes" >> $GITHUB_STEP_SUMMARY
            echo "- \`ci/\` - CI/CD changes" >> $GITHUB_STEP_SUMMARY
            echo "- \`revert/\` - Reverting changes" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Example: \`feature/add-user-authentication\`" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          # Check branch name length
          if [[ ${#BRANCH_NAME} -gt 63 ]]; then
            echo "::error::Branch name is too long (${#BRANCH_NAME} characters). Maximum allowed is 63 characters."
            exit 1
          fi
          
          # Check for valid characters (alphanumeric, hyphens, underscores, forward slashes)
          if [[ ! "$BRANCH_NAME" =~ ^[a-zA-Z0-9/_-]+$ ]]; then
            echo "::error::Branch name contains invalid characters. Use only alphanumeric, hyphens, underscores, and forward slashes."
            exit 1
          fi
          
          echo "✅ Branch name '$BRANCH_NAME' follows naming convention" >> $GITHUB_STEP_SUMMARY

      - name: Check PR title convention
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          
          # Check for conventional commit format
          CONVENTIONAL_PATTERN="^(feat|fix|docs|style|refactor|perf|test|chore|ci|revert)(\(.+\))?: .+"
          
          if [[ ! "$PR_TITLE" =~ $CONVENTIONAL_PATTERN ]]; then
            echo "::error::PR title does not follow conventional commit format"
            echo "## ❌ Invalid PR Title" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "PR title must follow conventional commit format:" >> $GITHUB_STEP_SUMMARY
            echo "\`<type>(<scope>): <description>\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Examples:" >> $GITHUB_STEP_SUMMARY
            echo "- \`feat: add user authentication\`" >> $GITHUB_STEP_SUMMARY
            echo "- \`fix(api): resolve data sync issue\`" >> $GITHUB_STEP_SUMMARY
            echo "- \`docs: update README with setup instructions\`" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          echo "✅ PR title follows conventional commit format" >> $GITHUB_STEP_SUMMARY

      - name: Label PR based on branch prefix
        uses: actions/github-script@v7
        with:
          script: |
            const branchName = context.payload.pull_request.head.ref;
            const prefix = branchName.split('/')[0];
            
            const labelMap = {
              'feature': 'enhancement',
              'bugfix': 'bug',
              'hotfix': 'urgent',
              'docs': 'documentation',
              'test': 'testing',
              'perf': 'performance',
              'ci': 'ci/cd',
              'chore': 'maintenance',
              'refactor': 'refactoring'
            };
            
            const label = labelMap[prefix];
            if (label) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: [label]
              });
            }