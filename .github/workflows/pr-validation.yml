name: 🔍 Pull Request Validation & Preview

on:
  pull_request:
    branches: [main, production]
    types: [opened, synchronize, reopened, ready_for_review]
  pull_request_review:
    types: [submitted]

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

concurrency:
  group: pr-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  # ============================================================================
  # PR ANALYSIS & VALIDATION
  # ============================================================================

  analyze-changes:
    name: 📊 Analyze PR Changes
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    outputs:
      has-breaking-changes: ${{ steps.breaking.outputs.detected }}
      migration-required: ${{ steps.migration.outputs.required }}
      security-review-needed: ${{ steps.security.outputs.needed }}
      performance-impact: ${{ steps.performance.outputs.impact }}
      complexity-score: ${{ steps.complexity.outputs.score }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          files_yaml: |
            api:
              - 'apps/web/app/api/**'
              - 'packages/database/**'
            migrations:
              - 'supabase/migrations/**'
              - 'packages/database/src/schema/**'
            security:
              - 'packages/auth/**'
              - 'middleware.ts'
              - 'apps/web/lib/auth.ts'
            performance:
              - 'apps/web/app/**/page.tsx'
              - 'apps/web/components/**'
              - 'apps/web/lib/**'
            config:
              - 'package.json'
              - 'pnpm-lock.yaml'
              - 'turbo.json'
              - 'next.config.ts'
              - 'vercel.json'

      - name: Check for breaking changes
        id: breaking
        run: |
          BREAKING_PATTERNS=(
            "BREAKING"
            "breaking change"
            "removes.*api"
            "removes.*endpoint"
            "changes.*schema"
          )
          
          DETECTED=false
          for pattern in "${BREAKING_PATTERNS[@]}"; do
            if git log --oneline ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} | grep -i "$pattern"; then
              DETECTED=true
              break
            fi
          done
          
          echo "detected=$DETECTED" >> $GITHUB_OUTPUT

      - name: Check migration requirement
        id: migration
        run: |
          REQUIRED=false
          if [[ "${{ steps.changed-files.outputs.migrations_any_changed }}" == "true" ]]; then
            REQUIRED=true
          fi
          echo "required=$REQUIRED" >> $GITHUB_OUTPUT

      - name: Check security review need
        id: security
        run: |
          NEEDED=false
          if [[ "${{ steps.changed-files.outputs.security_any_changed }}" == "true" ]]; then
            NEEDED=true
          fi
          echo "needed=$NEEDED" >> $GITHUB_OUTPUT

      - name: Assess performance impact
        id: performance
        run: |
          IMPACT="low"
          if [[ "${{ steps.changed-files.outputs.performance_any_changed }}" == "true" ]]; then
            IMPACT="medium"
          fi
          if [[ "${{ steps.changed-files.outputs.api_any_changed }}" == "true" ]]; then
            IMPACT="high"
          fi
          echo "impact=$IMPACT" >> $GITHUB_OUTPUT

      - name: Calculate complexity score
        id: complexity
        run: |
          SCORE=1
          
          # Add points for different types of changes
          [[ "${{ steps.changed-files.outputs.api_any_changed }}" == "true" ]] && SCORE=$((SCORE + 3))
          [[ "${{ steps.changed-files.outputs.migrations_any_changed }}" == "true" ]] && SCORE=$((SCORE + 3))
          [[ "${{ steps.changed-files.outputs.security_any_changed }}" == "true" ]] && SCORE=$((SCORE + 2))
          [[ "${{ steps.changed-files.outputs.performance_any_changed }}" == "true" ]] && SCORE=$((SCORE + 2))
          [[ "${{ steps.changed-files.outputs.config_any_changed }}" == "true" ]] && SCORE=$((SCORE + 1))
          
          # Add points for number of files changed
          FILES_CHANGED=$(echo "${{ steps.changed-files.outputs.all_changed_files }}" | wc -w)
          if [[ $FILES_CHANGED -gt 20 ]]; then
            SCORE=$((SCORE + 2))
          elif [[ $FILES_CHANGED -gt 10 ]]; then
            SCORE=$((SCORE + 1))
          fi
          
          echo "score=$SCORE" >> $GITHUB_OUTPUT

  # ============================================================================
  # VALIDATION TESTS
  # ============================================================================

  pr-validation-tests:
    name: ✅ PR Validation Tests
    runs-on: ubuntu-latest
    needs: analyze-changes
    if: github.event.pull_request.draft == false
    strategy:
      fail-fast: false
      matrix:
        test-type: [unit, integration, type-check, lint]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js & pnpm
        uses: ./.github/actions/setup-node-pnpm

      - name: Install dependencies
        run: pnpm install

      - name: Generate database types
        if: matrix.test-type != 'lint'
        run: pnpm db:generate
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Run unit tests
        if: matrix.test-type == 'unit'
        run: |
          pnpm test --coverage --passWithNoTests
        env:
          NODE_ENV: test

      - name: Run integration tests
        if: matrix.test-type == 'integration'
        run: |
          pnpm test:integration --passWithNoTests
        env:
          NODE_ENV: test
          DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}

      - name: Run TypeScript check
        if: matrix.test-type == 'type-check'
        run: pnpm typecheck

      - name: Run linting
        if: matrix.test-type == 'lint'
        run: |
          pnpm lint
          pnpm format --check

      - name: Upload test results
        if: always() && matrix.test-type == 'unit'
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.test-type }}
          path: |
            coverage/
            test-results.xml

  # ============================================================================
  # SECURITY ANALYSIS
  # ============================================================================

  security-analysis:
    name: 🔒 Security Analysis
    runs-on: ubuntu-latest
    needs: analyze-changes
    if: needs.analyze-changes.outputs.security-review-needed == 'true' || needs.analyze-changes.outputs.complexity-score >= '5'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js & pnpm
        uses: ./.github/actions/setup-node-pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: Run security audit
        run: |
          pnpm audit --audit-level moderate --json > security-audit.json || true
          
          # Check for high/critical vulnerabilities
          HIGH_VULNS=$(cat security-audit.json | jq '.metadata.vulnerabilities.high // 0')
          CRITICAL_VULNS=$(cat security-audit.json | jq '.metadata.vulnerabilities.critical // 0')
          
          echo "High vulnerabilities: $HIGH_VULNS"
          echo "Critical vulnerabilities: $CRITICAL_VULNS"
          
          if [[ $CRITICAL_VULNS -gt 0 ]]; then
            echo "❌ Critical vulnerabilities found!"
            exit 1
          fi
          
          if [[ $HIGH_VULNS -gt 5 ]]; then
            echo "⚠️ Too many high vulnerabilities found!"
            exit 1
          fi

      - name: Run Semgrep security scan
        uses: semgrep/semgrep-action@v1
        with:
          config: auto
          generateSarif: "1"

      - name: Upload security scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: semgrep.sarif

  # ============================================================================
  # PREVIEW DEPLOYMENT
  # ============================================================================

  deploy-preview:
    name: 🚀 Deploy Preview
    runs-on: ubuntu-latest
    needs: [pr-validation-tests]
    if: github.event.pull_request.draft == false && github.event.action != 'closed'
    environment:
      name: preview-pr-${{ github.event.pull_request.number }}
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js & pnpm
        uses: ./.github/actions/setup-node-pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Deploy to Vercel Preview
        id: deploy
        run: |
          cd apps/web
          vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
          vercel build --token=${{ secrets.VERCEL_TOKEN }}
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "Deployed to: $DEPLOYMENT_URL"
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Wait for deployment
        run: |
          sleep 30
          curl -f ${{ steps.deploy.outputs.url }}/api/health

      - name: Run preview tests
        run: |
          # Basic smoke tests on preview deployment
          ENDPOINTS=(
            "/"
            "/trending"
            "/api/health"
            "/api/trending/test"
          )
          
          for endpoint in "${ENDPOINTS[@]}"; do
            echo "Testing: ${{ steps.deploy.outputs.url }}$endpoint"
            curl -f -s "${{ steps.deploy.outputs.url }}$endpoint" > /dev/null
          done

  # ============================================================================
  # PERFORMANCE ANALYSIS
  # ============================================================================

  performance-analysis:
    name: ⚡ Performance Analysis
    runs-on: ubuntu-latest
    needs: [deploy-preview, analyze-changes]
    if: needs.analyze-changes.outputs.performance-impact != 'low'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Lighthouse CI on Preview
        uses: treosh/lighthouse-ci-action@v12
        with:
          urls: |
            ${{ needs.deploy-preview.outputs.url }}
            ${{ needs.deploy-preview.outputs.url }}/trending
          configPath: '.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Analyze bundle size
        run: |
          cd apps/web
          ANALYZE=true pnpm build
          
          # Check for bundle size increases
          if [[ -f ".next/analyze/bundle-analyzer.json" ]]; then
            echo "📦 Bundle analysis completed"
            # Add bundle size analysis logic here
          fi

  # ============================================================================
  # PR COMMENTS & REPORTING
  # ============================================================================

  update-pr-status:
    name: 📝 Update PR Status
    runs-on: ubuntu-latest
    needs: [analyze-changes, pr-validation-tests, deploy-preview, security-analysis, performance-analysis]
    if: always() && github.event.pull_request.draft == false
    steps:
      - name: Create PR comment
        uses: actions/github-script@v7
        with:
          script: |
            const needs = ${{ toJson(needs) }};
            const changes = needs['analyze-changes']?.outputs || {};
            const deployUrl = needs['deploy-preview']?.outputs?.url;
            
            let comment = `## 🔍 PR Validation Results\n\n`;
            
            // Analysis summary
            comment += `### 📊 Change Analysis\n`;
            comment += `- **Complexity Score**: ${changes['complexity-score'] || 'N/A'}/10\n`;
            comment += `- **Performance Impact**: ${changes['performance-impact'] || 'low'}\n`;
            comment += `- **Breaking Changes**: ${changes['has-breaking-changes'] === 'true' ? '⚠️ Yes' : '✅ No'}\n`;
            comment += `- **Migration Required**: ${changes['migration-required'] === 'true' ? '⚠️ Yes' : '✅ No'}\n`;
            comment += `- **Security Review**: ${changes['security-review-needed'] === 'true' ? '🔒 Required' : '✅ Not needed'}\n\n`;
            
            // Test results
            comment += `### ✅ Test Results\n`;
            const testStatus = needs['pr-validation-tests']?.result;
            comment += `- **Validation Tests**: ${testStatus === 'success' ? '✅ Passed' : testStatus === 'failure' ? '❌ Failed' : '⏭️ Skipped'}\n`;
            
            const securityStatus = needs['security-analysis']?.result;
            comment += `- **Security Analysis**: ${securityStatus === 'success' ? '🔒 Passed' : securityStatus === 'failure' ? '❌ Issues found' : '⏭️ Skipped'}\n`;
            
            const perfStatus = needs['performance-analysis']?.result;
            comment += `- **Performance Analysis**: ${perfStatus === 'success' ? '⚡ Good' : perfStatus === 'failure' ? '⚠️ Issues detected' : '⏭️ Skipped'}\n\n`;
            
            // Preview deployment
            if (deployUrl) {
              comment += `### 🚀 Preview Deployment\n`;
              comment += `🌐 **Live Preview**: [${deployUrl}](${deployUrl})\n\n`;
              comment += `**Quick Links**:\n`;
              comment += `- [Homepage](${deployUrl})\n`;
              comment += `- [Trending](${deployUrl}/trending)\n`;
              comment += `- [Health Check](${deployUrl}/api/health)\n\n`;
            }
            
            // Recommendations
            comment += `### 💡 Recommendations\n`;
            if (changes['complexity-score'] >= '7') {
              comment += `- ⚠️ **High complexity**: Consider breaking this PR into smaller changes\n`;
            }
            if (changes['has-breaking-changes'] === 'true') {
              comment += `- 🚨 **Breaking changes detected**: Ensure proper migration strategy\n`;
            }
            if (changes['security-review-needed'] === 'true') {
              comment += `- 🔒 **Security review needed**: Please have security team review\n`;
            }
            if (testStatus === 'failure') {
              comment += `- ❌ **Fix failing tests** before merge\n`;
            }
            
            comment += `\n---\n*Automated PR validation by MySetlist CI/CD*`;
            
            // Find existing comment and update or create new
            const { data: comments } = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            const existingComment = comments.find(comment => 
              comment.body.includes('🔍 PR Validation Results')
            );
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                comment_id: existingComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

  # ============================================================================
  # CLEANUP ON PR CLOSE
  # ============================================================================

  cleanup-preview:
    name: 🧹 Cleanup Preview
    runs-on: ubuntu-latest
    if: github.event.action == 'closed'
    steps:
      - name: Delete preview deployment
        run: |
          echo "🧹 Cleaning up preview deployment for PR #${{ github.event.pull_request.number }}"
          # Add cleanup logic here if needed
          
      - name: Remove preview environment
        uses: actions/github-script@v7
        with:
          script: |
            try {
              await github.rest.repos.deleteAnEnvironment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                environment_name: `preview-pr-${{ github.event.pull_request.number }}`
              });
            } catch (error) {
              console.log('Environment may not exist or already deleted');
            }