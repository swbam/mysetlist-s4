name: CI Pipeline

on:
  push:
    branches: [main, develop, 'feature/**', 'hotfix/**']
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '10.12.4'
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ vars.TURBO_TEAM }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Code Quality & Security Checks
  quality-checks:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          
      - run: pnpm install --frozen-lockfile
      
      - name: Lint Check
        run: pnpm lint
      
      - name: Format Check
        run: pnpm format
      
      - name: Security Audit
        run: |
          pnpm audit --audit-level=high || true
          npx better-npm-audit audit --level high
      
      - name: License Check
        run: npx license-checker --production --onlyAllow 'MIT;Apache-2.0;BSD-3-Clause;ISC'
      
  typecheck:
    name: TypeScript Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          
      - run: pnpm install --frozen-lockfile
      
      - run: pnpm typecheck
      
  # Unit & Integration Tests with Coverage
  test-suite:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        shard: [1, 2, 3, 4]
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: mysetlist_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          
      - run: pnpm install --frozen-lockfile
      
      - name: Setup test environment
        run: |
          cp .env.example .env.test
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/mysetlist_test" >> .env.test
      
      - name: Run database migrations
        run: cd packages/database && pnpm push
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/mysetlist_test
      
      - name: Run tests (Shard ${{ matrix.shard }})
        run: pnpm test -- --shard=${{ matrix.shard }}/4 --coverage
        env:
          CI: true
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/mysetlist_test
      
      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: unittests
          name: shard-${{ matrix.shard }}
      
  # E2E Tests with Multiple Browsers
  e2e-tests:
    name: E2E Tests (${{ matrix.browser }})
    runs-on: ubuntu-latest
    needs: [quality-checks]
    strategy:
      matrix:
        browser: [chrome, firefox, edge]
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: mysetlist_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          
      - run: pnpm install --frozen-lockfile
      
      - name: Setup test database
        run: |
          cd packages/database
          pnpm push
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/mysetlist_test
      
      - name: Build application
        run: pnpm build
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/mysetlist_test
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
      
      - name: Run Cypress E2E tests
        uses: cypress-io/github-action@v6
        with:
          working-directory: apps/web
          start: pnpm start
          wait-on: 'http://localhost:3001'
          wait-on-timeout: 120
          browser: ${{ matrix.browser }}
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/mysetlist_test
          CYPRESS_BASE_URL: http://localhost:3001
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-results-${{ matrix.browser }}
          path: apps/web/cypress/videos
          retention-days: 7
  
  # Performance Testing
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [quality-checks]
    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          
      - run: pnpm install --frozen-lockfile
      
      - name: Build application
        run: pnpm build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
      
      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v11
        with:
          urls: |
            http://localhost:3001
            http://localhost:3001/trending
            http://localhost:3001/artists
          uploadArtifacts: true
          temporaryPublicStorage: true
  
  # Build & Docker Image
  build-and-docker:
    name: Build & Docker
    runs-on: ubuntu-latest
    needs: [quality-checks, typecheck, test-suite]
    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          
      - run: pnpm install --frozen-lockfile
      
      - name: Build application
        run: pnpm build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: |
            apps/web/.next
            apps/web/public
          retention-days: 7
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: mysetlist:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
  
  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [build-and-docker]
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
  
  # Deployment Readiness
  deployment-ready:
    name: Deployment Ready
    runs-on: ubuntu-latest
    needs: [quality-checks, typecheck, test-suite, e2e-tests, performance-tests, security-scan]
    if: success() && github.ref == 'refs/heads/main'
    steps:
      - name: Deployment Readiness Check
        run: |
          echo "âœ… All checks passed! Ready for deployment."
          echo "### ðŸš€ Deployment Readiness Report" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Code Quality Passed" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… TypeScript Check Passed" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Unit Tests Passed" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… E2E Tests Passed" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Performance Tests Passed" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… Security Scan Passed" >> $GITHUB_STEP_SUMMARY