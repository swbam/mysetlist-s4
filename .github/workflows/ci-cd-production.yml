name: 🚀 MySetlist Production CI/CD Pipeline

on:
  push:
    branches: [main, production]
  pull_request:
    branches: [main, production]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      force_deploy:
        description: 'Force deployment (skip safety checks)'
        required: false
        default: false
        type: boolean
      run_performance_tests:
        description: 'Run performance tests'
        required: false
        default: true
        type: boolean

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ vars.TURBO_TEAM }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' && github.ref != 'refs/heads/production' }}

jobs:
  # ============================================================================
  # STAGE 1: BUILD & VALIDATION
  # ============================================================================
  
  detect-changes:
    name: 🔍 Detect Changes
    runs-on: ubuntu-latest
    outputs:
      web-changed: ${{ steps.changes.outputs.web }}
      api-changed: ${{ steps.changes.outputs.api }}
      database-changed: ${{ steps.changes.outputs.database }}
      config-changed: ${{ steps.changes.outputs.config }}
      docs-changed: ${{ steps.changes.outputs.docs }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect file changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            web:
              - 'apps/web/**'
              - 'packages/**'
            api:
              - 'apps/web/app/api/**'
              - 'supabase/**'
            database:
              - 'packages/database/**'
              - 'supabase/migrations/**'
            config:
              - 'package.json'
              - 'pnpm-lock.yaml'
              - 'turbo.json'
              - '.github/**'
              - 'vercel.json'
            docs:
              - 'docs/**'
              - '*.md'

  setup-build-cache:
    name: 🏗️ Setup Build Cache
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.web-changed == 'true' || github.event_name == 'workflow_dispatch'
    outputs:
      cache-hit: ${{ steps.cache.outputs.cache-hit }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        id: cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: pnpm install

  build-and-typecheck:
    name: 🔨 Build & TypeCheck
    runs-on: ubuntu-latest
    needs: [detect-changes, setup-build-cache]
    if: needs.detect-changes.outputs.web-changed == 'true' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js & pnpm
        uses: ./.github/actions/setup-node-pnpm

      - name: Restore pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: Generate database types
        run: pnpm db:generate
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: TypeScript check
        run: pnpm typecheck

      - name: Build application
        run: pnpm build
        env:
          NODE_ENV: production
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            apps/web/.next
            **/dist
            **/build
          key: build-${{ github.sha }}

  lint-and-format:
    name: 🧹 Lint & Format Check
    runs-on: ubuntu-latest
    needs: [detect-changes, setup-build-cache]
    if: needs.detect-changes.outputs.web-changed == 'true' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js & pnpm
        uses: ./.github/actions/setup-node-pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: Run linting
        run: pnpm lint

      - name: Check formatting
        run: pnpm format --check

  # ============================================================================
  # STAGE 2: TESTING SUITE
  # ============================================================================

  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    needs: [detect-changes, setup-build-cache]
    if: needs.detect-changes.outputs.web-changed == 'true' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js & pnpm
        uses: ./.github/actions/setup-node-pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: Generate database types
        run: pnpm db:generate
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Run unit tests
        run: pnpm test
        env:
          NODE_ENV: test
          DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}

      - name: Upload test coverage
        uses: codecov/codecov-action@v4
        if: always()
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  e2e-tests:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    needs: [build-and-typecheck]
    if: needs.detect-changes.outputs.web-changed == 'true' || github.event_name == 'workflow_dispatch'
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js & pnpm
        uses: ./.github/actions/setup-node-pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: Install Playwright
        run: pnpm exec playwright install --with-deps ${{ matrix.browser }}

      - name: Restore build cache
        uses: actions/cache@v4
        with:
          path: |
            apps/web/.next
            **/dist
            **/build
          key: build-${{ github.sha }}

      - name: Start application
        run: |
          cd apps/web
          pnpm start &
          sleep 30
        env:
          PORT: 3000

      - name: Wait for application
        run: |
          timeout 60s bash -c 'until curl -f http://localhost:3001/api/health; do sleep 2; done'

      - name: Run E2E tests
        run: pnpm exec playwright test --project=${{ matrix.browser }}
        env:
          CI: true
          PLAYWRIGHT_BASE_URL: http://localhost:3001

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-${{ matrix.browser }}
          path: playwright-report/
          retention-days: 7

  accessibility-tests:
    name: ♿ Accessibility Tests
    runs-on: ubuntu-latest
    needs: [build-and-typecheck]
    if: needs.detect-changes.outputs.web-changed == 'true' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js & pnpm
        uses: ./.github/actions/setup-node-pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: Restore build cache
        uses: actions/cache@v4
        with:
          path: |
            apps/web/.next
            **/dist
            **/build
          key: build-${{ github.sha }}

      - name: Start application
        run: |
          cd apps/web
          pnpm start &
          sleep 30
        env:
          PORT: 3000

      - name: Run accessibility tests
        run: |
          npx @axe-core/cli http://localhost:3001 \
            --tags wcag2a,wcag2aa \
            --exit \
            --stdout \
            --verbose > accessibility-report.json

      - name: Upload accessibility report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: accessibility-report
          path: accessibility-report.json

  # ============================================================================
  # STAGE 3: SECURITY & VULNERABILITY SCANNING
  # ============================================================================

  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: [detect-changes]
    if: needs.detect-changes.outputs.web-changed == 'true' || needs.detect-changes.outputs.config-changed == 'true' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js & pnpm
        uses: ./.github/actions/setup-node-pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: Run dependency audit
        run: pnpm audit --audit-level moderate
        continue-on-error: true

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          languages: javascript

  secrets-scan:
    name: 🔐 Secrets Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ============================================================================
  # STAGE 4: PERFORMANCE & BUNDLE ANALYSIS
  # ============================================================================

  performance-tests:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: [build-and-typecheck]
    if: (needs.detect-changes.outputs.web-changed == 'true' || github.event_name == 'workflow_dispatch') && (github.event.inputs.run_performance_tests == 'true' || github.event.inputs.run_performance_tests == '')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js & pnpm
        uses: ./.github/actions/setup-node-pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: Restore build cache
        uses: actions/cache@v4
        with:
          path: |
            apps/web/.next
            **/dist
            **/build
          key: build-${{ github.sha }}

      - name: Start application
        run: |
          cd apps/web
          pnpm start &
          sleep 30
        env:
          PORT: 3000

      - name: Wait for application
        run: |
          timeout 60s bash -c 'until curl -f http://localhost:3001/api/health; do sleep 2; done'

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: '.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Run bundle analysis
        run: |
          cd apps/web
          ANALYZE=true pnpm build
        env:
          NODE_ENV: production

      - name: Upload bundle analysis
        uses: actions/upload-artifact@v4
        with:
          name: bundle-analysis
          path: apps/web/.next/analyze/

  # ============================================================================
  # STAGE 5: STAGING DEPLOYMENT
  # ============================================================================

  deploy-staging:
    name: 🧪 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-typecheck, lint-and-format, unit-tests, security-scan]
    if: |
      always() &&
      needs.build-and-typecheck.result == 'success' &&
      needs.lint-and-format.result == 'success' &&
      needs.unit-tests.result == 'success' &&
      needs.security-scan.result == 'success' &&
      (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch')
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js & pnpm
        uses: ./.github/actions/setup-node-pnpm

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Deploy to Vercel (Staging)
        id: deploy
        run: |
          cd apps/web
          vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
          vercel build --token=${{ secrets.VERCEL_TOKEN }}
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "Deployed to: $DEPLOYMENT_URL"
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Run staging health checks
        run: |
          sleep 30
          curl -f ${{ steps.deploy.outputs.url }}/api/health/comprehensive
          curl -f ${{ steps.deploy.outputs.url }}/api/trending/test

      - name: Comment deployment URL
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🚀 **Staging Deployment Ready**\n\n📱 Preview: ${{ steps.deploy.outputs.url }}\n\n✅ All checks passed!`
            })

  # ============================================================================
  # STAGE 6: PRODUCTION DEPLOYMENT
  # ============================================================================

  deploy-production:
    name: 🌍 Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging, e2e-tests, accessibility-tests]
    if: |
      always() &&
      needs.deploy-staging.result == 'success' &&
      (needs.e2e-tests.result == 'success' || needs.e2e-tests.result == 'skipped') &&
      (needs.accessibility-tests.result == 'success' || needs.accessibility-tests.result == 'skipped') &&
      (github.ref == 'refs/heads/production' || 
       (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'))
    environment:
      name: production
      url: https://mysetlist-sonnet.vercel.app
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js & pnpm
        uses: ./.github/actions/setup-node-pnpm

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Create deployment backup
        id: backup
        run: |
          CURRENT_DEPLOYMENT=$(vercel ls --scope ${{ secrets.VERCEL_ORG_ID }} | grep mysetlist | head -1 | awk '{print $1}')
          echo "current=$CURRENT_DEPLOYMENT" >> $GITHUB_OUTPUT
          echo "Backup deployment: $CURRENT_DEPLOYMENT"

      - name: Deploy to Production
        id: deploy
        run: |
          cd apps/web
          vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
          vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "Deployed to: $DEPLOYMENT_URL"
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

      - name: Run production health checks
        run: |
          sleep 60
          curl -f https://mysetlist-sonnet.vercel.app/api/health/comprehensive
          curl -f https://mysetlist-sonnet.vercel.app/api/trending/test
          curl -f https://mysetlist-sonnet.vercel.app/

      - name: Run production smoke tests
        run: |
          ENDPOINTS=(
            "/"
            "/trending"
            "/artists"
            "/api/health"
            "/api/trending"
            "/api/search"
          )
          
          for endpoint in "${ENDPOINTS[@]}"; do
            echo "Testing: https://mysetlist-sonnet.vercel.app$endpoint"
            curl -f -s "https://mysetlist-sonnet.vercel.app$endpoint" > /dev/null
          done

      # Sentry release disabled to prevent automated dependency PRs
      # - name: Update Sentry release
      #   if: success()
      #   run: |
      #     curl -X POST "https://sentry.io/api/0/organizations/mysetlist/releases/" \
      #       -H "Authorization: Bearer ${{ secrets.SENTRY_AUTH_TOKEN }}" \
      #       -H "Content-Type: application/json" \
      #       -d "{\"version\":\"${{ github.sha }}\",\"projects\":[\"mysetlist-web\"]}"
      #   continue-on-error: true

      - name: Rollback on failure
        if: failure() && steps.backup.outputs.current != ''
        run: |
          cd apps/web
          vercel alias set ${{ steps.backup.outputs.current }} mysetlist-sonnet.vercel.app --token=${{ secrets.VERCEL_TOKEN }}
          echo "🔄 Rolled back to: ${{ steps.backup.outputs.current }}"

  # ============================================================================
  # STAGE 7: POST-DEPLOYMENT MONITORING
  # ============================================================================

  post-deployment-monitoring:
    name: 📊 Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: needs.deploy-production.result == 'success'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Wait for deployment stabilization
        run: sleep 120

      - name: Run comprehensive health check
        run: |
          curl -f https://mysetlist-sonnet.vercel.app/api/health/comprehensive
          curl -f https://mysetlist-sonnet.vercel.app/api/monitoring/dashboard

      - name: Run post-deployment Lighthouse audit
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            https://mysetlist-sonnet.vercel.app
            https://mysetlist-sonnet.vercel.app/trending
            https://mysetlist-sonnet.vercel.app/artists
          configPath: '.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Monitor key metrics
        run: |
          echo "🎯 Monitoring deployment success..."
          # Add custom monitoring logic here
          curl -s https://mysetlist-sonnet.vercel.app/api/analytics/vitals

  # ============================================================================
  # NOTIFICATION & REPORTING
  # ============================================================================

  notify-deployment-status:
    name: 📢 Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-production, post-deployment-monitoring]
    if: always()
    steps:
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ needs.deploy-production.result == 'success' && '✅ Success' || '❌ Failed' }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Create deployment summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Build & TypeCheck | ${{ needs.build-and-typecheck.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.unit-tests.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security | ${{ needs.security-scan.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Staging | ${{ needs.deploy-staging.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Production | ${{ needs.deploy-production.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🌐 **Production URL**: https://mysetlist-sonnet.vercel.app" >> $GITHUB_STEP_SUMMARY