name: Deploy to Staging

on:
  push:
    branches: [develop]
  pull_request:
    types: [labeled]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '10.12.4'

jobs:
  # Check if deployment is requested
  should-deploy:
    name: Check Deployment
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.check.outputs.should-deploy }}
    steps:
      - name: Check deployment conditions
        id: check
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "pull_request" ]] && [[ "${{ contains(github.event.pull_request.labels.*.name, 'deploy-staging') }}" == "true" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi
  
  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [should-deploy]
    if: needs.should-deploy.outputs.should-deploy == 'true'
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
      
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
      
      - run: pnpm install --frozen-lockfile
      
      - name: Build application
        run: pnpm build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.STAGING_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.STAGING_SUPABASE_ANON_KEY }}
          NEXT_PUBLIC_APP_URL: https://staging.mysetlist.app
      
      - name: Deploy to Vercel (Staging)
        id: deploy
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: |
          URL=$(pnpm vercel --yes --token=$VERCEL_TOKEN --env-file=.env.staging)
          echo "url=$URL" >> $GITHUB_OUTPUT
          echo "Deployed to staging: $URL"
      
      - name: Run staging tests
        run: |
          STAGING_URL="${{ steps.deploy.outputs.url }}"
          
          # Basic health check
          curl -f "$STAGING_URL/api/health" || exit 1
          
          # Run staging-specific tests
          pnpm test:staging --url="$STAGING_URL"
      
      - name: Update PR comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `ðŸš€ **Staging deployment ready!**
            
            URL: ${{ steps.deploy.outputs.url }}
            
            Please test the following:
            - [ ] Authentication flow
            - [ ] Search functionality
            - [ ] Artist pages
            - [ ] Voting system
            - [ ] Mobile responsiveness
            
            Once testing is complete, approve this PR for production deployment.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });