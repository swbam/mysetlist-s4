name: Test Report

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed

permissions:
  contents: read
  actions: read
  checks: write
  pull-requests: write

jobs:
  report:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.event == 'pull_request'
    steps:
      - name: Download artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.payload.workflow_run.id,
            });
            
            const matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "test-results"
            })[0];
            
            if (matchArtifact) {
              const download = await github.rest.actions.downloadArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: matchArtifact.id,
                archive_format: 'zip',
              });
              
              const fs = require('fs');
              fs.writeFileSync('test-results.zip', Buffer.from(download.data));
            }
      
      - name: Extract test results
        run: |
          if [ -f test-results.zip ]; then
            unzip test-results.zip
          fi
      
      - name: Publish test results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: |
            **/test-results.xml
            **/junit.xml
          check_name: Test Results
          comment_mode: always
          compare_to_earlier_commit: true
          report_individual_runs: true
      
      - name: Generate coverage report
        uses: 5monkeys/cobertura-action@master
        if: always()
        with:
          path: coverage/cobertura-coverage.xml
          minimum_coverage: 75
          fail_below_threshold: false
          show_line: true
          show_branch: true
          show_class_names: true
      
      - name: Comment PR with summary
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const fs = require('fs');
            
            // Read test report if exists
            let testReport = '';
            if (fs.existsSync('test-report.md')) {
              testReport = fs.readFileSync('test-report.md', 'utf8');
            }
            
            // Read lighthouse results if exists
            let lighthouseReport = '';
            if (fs.existsSync('.lighthouseci/assertion-results.json')) {
              const results = JSON.parse(fs.readFileSync('.lighthouseci/assertion-results.json', 'utf8'));
              
              lighthouseReport = '## üîç Lighthouse Results\n\n';
              lighthouseReport += '| Page | Performance | Accessibility | Best Practices | SEO |\n';
              lighthouseReport += '|------|-------------|---------------|----------------|-----|\n';
              
              for (const [url, scores] of Object.entries(results)) {
                const page = url.replace('http://localhost:3001', '');
                lighthouseReport += `| ${page || '/'} | ${Math.round(scores.performance * 100)} | ${Math.round(scores.accessibility * 100)} | ${Math.round(scores['best-practices'] * 100)} | ${Math.round(scores.seo * 100)} |\n`;
              }
            }
            
            // Combine reports
            let comment = '# üìã Test Results Summary\n\n';
            
            if (testReport) {
              comment += testReport + '\n\n';
            }
            
            if (lighthouseReport) {
              comment += lighthouseReport + '\n\n';
            }
            
            // Add workflow run link
            comment += `\n---\n`;
            comment += `[View full CI run](${context.payload.workflow_run.html_url})`;
            
            // Find PR number
            const pr = context.payload.workflow_run.pull_requests[0];
            if (pr) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: comment
              });
            }