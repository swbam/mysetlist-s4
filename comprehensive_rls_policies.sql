-- Comprehensive Row Level Security (RLS) Policies for MySetlist
-- Generated by Sub-Agent 3 for Database Security
-- This script ensures all tables have proper RLS policies

-- =====================================================
-- ENABLE RLS ON ALL TABLES
-- =====================================================

-- Core tables already enabled in previous migrations
-- Checking and enabling RLS on any missing tables

-- Admin and system tables
ALTER TABLE IF EXISTS admin_notifications ENABLE ROW LEVEL SECURITY;
ALTER TABLE IF EXISTS capacity_planning ENABLE ROW LEVEL SECURITY;
ALTER TABLE IF EXISTS content_moderation ENABLE ROW LEVEL SECURITY;
ALTER TABLE IF EXISTS data_backups ENABLE ROW LEVEL SECURITY;
ALTER TABLE IF EXISTS experiments ENABLE ROW LEVEL SECURITY;
ALTER TABLE IF EXISTS infrastructure_configurations ENABLE ROW LEVEL SECURITY;
ALTER TABLE IF EXISTS moderation_logs ENABLE ROW LEVEL SECURITY;
ALTER TABLE IF EXISTS notification_categories ENABLE ROW LEVEL SECURITY;
ALTER TABLE IF EXISTS performance_benchmarks ENABLE ROW LEVEL SECURITY;
ALTER TABLE IF EXISTS reports ENABLE ROW LEVEL SECURITY;
ALTER TABLE IF EXISTS scalability_costs ENABLE ROW LEVEL SECURITY;
ALTER TABLE IF EXISTS scalability_events ENABLE ROW LEVEL SECURITY;
ALTER TABLE IF EXISTS scalability_milestones ENABLE ROW LEVEL SECURITY;
ALTER TABLE IF EXISTS scalability_plans ENABLE ROW LEVEL SECURITY;
ALTER TABLE IF EXISTS scalability_risks ENABLE ROW LEVEL SECURITY;
ALTER TABLE IF EXISTS search_analytics ENABLE ROW LEVEL SECURITY;
ALTER TABLE IF EXISTS system_health ENABLE ROW LEVEL SECURITY;
ALTER TABLE IF EXISTS user_activity_log ENABLE ROW LEVEL SECURITY;
ALTER TABLE IF EXISTS user_bans ENABLE ROW LEVEL SECURITY;
ALTER TABLE IF EXISTS user_follows_artists ENABLE ROW LEVEL SECURITY;
ALTER TABLE IF EXISTS artist_songs ENABLE ROW LEVEL SECURITY;
ALTER TABLE IF EXISTS email_logs ENABLE ROW LEVEL SECURITY;
ALTER TABLE IF EXISTS email_queue ENABLE ROW LEVEL SECURITY;

-- =====================================================
-- PUBLIC READ ACCESS POLICIES
-- =====================================================

-- These tables should be publicly readable
DROP POLICY IF EXISTS "Public can view artists" ON artists;
CREATE POLICY "Public can view artists" ON artists 
  FOR SELECT USING (true);

DROP POLICY IF EXISTS "Public can view shows" ON shows;
CREATE POLICY "Public can view shows" ON shows 
  FOR SELECT USING (true);

DROP POLICY IF EXISTS "Public can view venues" ON venues;
CREATE POLICY "Public can view venues" ON venues 
  FOR SELECT USING (true);

DROP POLICY IF EXISTS "Public can view setlists" ON setlists;
CREATE POLICY "Public can view setlists" ON setlists 
  FOR SELECT USING (true);

DROP POLICY IF EXISTS "Public can view setlist_songs" ON setlist_songs;
CREATE POLICY "Public can view setlist_songs" ON setlist_songs 
  FOR SELECT USING (true);

DROP POLICY IF EXISTS "Public can view songs" ON songs;
CREATE POLICY "Public can view songs" ON songs 
  FOR SELECT USING (true);

DROP POLICY IF EXISTS "Public can view artist_stats" ON artist_stats;
CREATE POLICY "Public can view artist_stats" ON artist_stats 
  FOR SELECT USING (true);

DROP POLICY IF EXISTS "Public can view show_artists" ON show_artists;
CREATE POLICY "Public can view show_artists" ON show_artists 
  FOR SELECT USING (true);

DROP POLICY IF EXISTS "Public can view artist_songs" ON artist_songs;
CREATE POLICY "Public can view artist_songs" ON artist_songs 
  FOR SELECT USING (true);

-- =====================================================
-- USER-SPECIFIC DATA POLICIES
-- =====================================================

-- User follows artists
DROP POLICY IF EXISTS "Users can view their own follows" ON user_follows_artists;
CREATE POLICY "Users can view their own follows" ON user_follows_artists
  FOR SELECT USING (auth.uid() = user_id);

DROP POLICY IF EXISTS "Users can manage their own follows" ON user_follows_artists;
CREATE POLICY "Users can manage their own follows" ON user_follows_artists
  FOR ALL USING (auth.uid() = user_id);

-- User activity logs (privacy-sensitive)
DROP POLICY IF EXISTS "Users can view their own activity" ON user_activity_log;
CREATE POLICY "Users can view their own activity" ON user_activity_log
  FOR SELECT USING (auth.uid() = user_id);

-- User bans (admin only)
DROP POLICY IF EXISTS "Only admins can view user bans" ON user_bans;
CREATE POLICY "Only admins can view user bans" ON user_bans
  FOR SELECT USING (
    EXISTS (
      SELECT 1 FROM users 
      WHERE users.id = auth.uid() 
      AND users.role = 'admin'
    )
  );

DROP POLICY IF EXISTS "Only admins can manage user bans" ON user_bans;
CREATE POLICY "Only admins can manage user bans" ON user_bans
  FOR ALL USING (
    EXISTS (
      SELECT 1 FROM users 
      WHERE users.id = auth.uid() 
      AND users.role = 'admin'
    )
  );

-- =====================================================
-- ADMIN-ONLY TABLES
-- =====================================================

-- Helper function to check if user is admin
CREATE OR REPLACE FUNCTION is_admin()
RETURNS boolean AS $$
BEGIN
  RETURN EXISTS (
    SELECT 1 FROM users 
    WHERE users.id = auth.uid() 
    AND users.role = 'admin'
  );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Admin notifications
DROP POLICY IF EXISTS "Only admins can access admin notifications" ON admin_notifications;
CREATE POLICY "Only admins can access admin notifications" ON admin_notifications
  FOR ALL USING (is_admin());

-- Content moderation
DROP POLICY IF EXISTS "Only admins can access moderation logs" ON moderation_logs;
CREATE POLICY "Only admins can access moderation logs" ON moderation_logs
  FOR ALL USING (is_admin());

DROP POLICY IF EXISTS "Only admins can access content moderation" ON content_moderation;
CREATE POLICY "Only admins can access content moderation" ON content_moderation
  FOR ALL USING (is_admin());

-- System administration tables
DROP POLICY IF EXISTS "Only admins can access capacity planning" ON capacity_planning;
CREATE POLICY "Only admins can access capacity planning" ON capacity_planning
  FOR ALL USING (is_admin());

DROP POLICY IF EXISTS "Only admins can access data backups" ON data_backups;
CREATE POLICY "Only admins can access data backups" ON data_backups
  FOR ALL USING (is_admin());

DROP POLICY IF EXISTS "Only admins can access experiments" ON experiments;
CREATE POLICY "Only admins can access experiments" ON experiments
  FOR ALL USING (is_admin());

DROP POLICY IF EXISTS "Only admins can access infrastructure configs" ON infrastructure_configurations;
CREATE POLICY "Only admins can access infrastructure configs" ON infrastructure_configurations
  FOR ALL USING (is_admin());

DROP POLICY IF EXISTS "Only admins can access performance benchmarks" ON performance_benchmarks;
CREATE POLICY "Only admins can access performance benchmarks" ON performance_benchmarks
  FOR ALL USING (is_admin());

DROP POLICY IF EXISTS "Only admins can access reports" ON reports;
CREATE POLICY "Only admins can access reports" ON reports
  FOR ALL USING (is_admin());

DROP POLICY IF EXISTS "Only admins can access scalability costs" ON scalability_costs;
CREATE POLICY "Only admins can access scalability costs" ON scalability_costs
  FOR ALL USING (is_admin());

DROP POLICY IF EXISTS "Only admins can access scalability events" ON scalability_events;
CREATE POLICY "Only admins can access scalability events" ON scalability_events
  FOR ALL USING (is_admin());

DROP POLICY IF EXISTS "Only admins can access scalability milestones" ON scalability_milestones;
CREATE POLICY "Only admins can access scalability milestones" ON scalability_milestones
  FOR ALL USING (is_admin());

DROP POLICY IF EXISTS "Only admins can access scalability plans" ON scalability_plans;
CREATE POLICY "Only admins can access scalability plans" ON scalability_plans
  FOR ALL USING (is_admin());

DROP POLICY IF EXISTS "Only admins can access scalability risks" ON scalability_risks;
CREATE POLICY "Only admins can access scalability risks" ON scalability_risks
  FOR ALL USING (is_admin());

DROP POLICY IF EXISTS "Only admins can access system health" ON system_health;
CREATE POLICY "Only admins can access system health" ON system_health
  FOR ALL USING (is_admin());

-- =====================================================
-- ANALYTICS & LOGGING POLICIES
-- =====================================================

-- Search analytics (read-only for authenticated users, write for system)
DROP POLICY IF EXISTS "Authenticated users can view search analytics" ON search_analytics;
CREATE POLICY "Authenticated users can view search analytics" ON search_analytics
  FOR SELECT USING (auth.uid() IS NOT NULL);

DROP POLICY IF EXISTS "System can insert search analytics" ON search_analytics;
CREATE POLICY "System can insert search analytics" ON search_analytics
  FOR INSERT WITH CHECK (true);

-- Notification categories (public read)
DROP POLICY IF EXISTS "Public can view notification categories" ON notification_categories;
CREATE POLICY "Public can view notification categories" ON notification_categories
  FOR SELECT USING (true);

DROP POLICY IF EXISTS "Only admins can manage notification categories" ON notification_categories;
CREATE POLICY "Only admins can manage notification categories" ON notification_categories
  FOR ALL USING (is_admin());

-- =====================================================
-- MISSING EMAIL POLICIES
-- =====================================================

-- Email logs policies (already exist but adding for completeness)
DROP POLICY IF EXISTS "System can insert email logs" ON email_logs;
CREATE POLICY "System can insert email logs" ON email_logs
  FOR INSERT WITH CHECK (true);

-- Email queue policies
DROP POLICY IF EXISTS "System can manage email queue" ON email_queue;
CREATE POLICY "System can manage email queue" ON email_queue
  FOR ALL USING (true);

-- =====================================================
-- PERFORMANCE INDEXES
-- =====================================================

-- Core lookup indexes
CREATE INDEX IF NOT EXISTS idx_artists_spotify_id ON artists(spotify_id);
CREATE INDEX IF NOT EXISTS idx_artists_ticketmaster_id ON artists(ticketmaster_id);
CREATE INDEX IF NOT EXISTS idx_artists_mbid ON artists(mbid);
CREATE INDEX IF NOT EXISTS idx_artists_slug ON artists(slug);
CREATE INDEX IF NOT EXISTS idx_artists_trending_score ON artists(trending_score DESC);

CREATE INDEX IF NOT EXISTS idx_venues_slug ON venues(slug);
CREATE INDEX IF NOT EXISTS idx_venues_location ON venues(city, country);
CREATE INDEX IF NOT EXISTS idx_venues_geo ON venues(latitude, longitude);

CREATE INDEX IF NOT EXISTS idx_shows_date ON shows(date);
CREATE INDEX IF NOT EXISTS idx_shows_venue_artist ON shows(venue_id, headliner_artist_id);
CREATE INDEX IF NOT EXISTS idx_shows_status ON shows(status);
CREATE INDEX IF NOT EXISTS idx_shows_trending_score ON shows(trending_score DESC);
CREATE INDEX IF NOT EXISTS idx_shows_ticketmaster_id ON shows(ticketmaster_id);

CREATE INDEX IF NOT EXISTS idx_songs_spotify_id ON songs(spotify_id);
CREATE INDEX IF NOT EXISTS idx_songs_artist ON songs(artist);
CREATE INDEX IF NOT EXISTS idx_songs_popularity ON songs(popularity DESC);

CREATE INDEX IF NOT EXISTS idx_setlists_show_artist ON setlists(show_id, artist_id);
CREATE INDEX IF NOT EXISTS idx_setlists_type ON setlists(type);

CREATE INDEX IF NOT EXISTS idx_setlist_songs_setlist_position ON setlist_songs(setlist_id, position);
CREATE INDEX IF NOT EXISTS idx_setlist_songs_song ON setlist_songs(song_id);
CREATE INDEX IF NOT EXISTS idx_setlist_songs_votes ON setlist_songs(net_votes DESC);

-- User interaction indexes
CREATE INDEX IF NOT EXISTS idx_votes_user_setlist_song ON votes(user_id, setlist_song_id);
CREATE INDEX IF NOT EXISTS idx_votes_created_at ON votes(created_at DESC);

CREATE INDEX IF NOT EXISTS idx_user_follows_user ON user_follows_artists(user_id);
CREATE INDEX IF NOT EXISTS idx_user_follows_artist ON user_follows_artists(artist_id);
CREATE INDEX IF NOT EXISTS idx_user_follows_followed_at ON user_follows_artists(followed_at DESC);

CREATE INDEX IF NOT EXISTS idx_user_activity_user_time ON user_activity_log(user_id, created_at DESC);
CREATE INDEX IF NOT EXISTS idx_user_activity_action ON user_activity_log(action);

-- Venue content indexes
CREATE INDEX IF NOT EXISTS idx_venue_tips_venue ON venue_tips(venue_id);
CREATE INDEX IF NOT EXISTS idx_venue_tips_user ON venue_tips(user_id);
CREATE INDEX IF NOT EXISTS idx_venue_tips_category ON venue_tips(category);

CREATE INDEX IF NOT EXISTS idx_venue_reviews_venue ON venue_reviews(venue_id);
CREATE INDEX IF NOT EXISTS idx_venue_reviews_user ON venue_reviews(user_id);
CREATE INDEX IF NOT EXISTS idx_venue_reviews_rating ON venue_reviews(rating);

-- Show relationships
CREATE INDEX IF NOT EXISTS idx_show_artists_show ON show_artists(show_id);
CREATE INDEX IF NOT EXISTS idx_show_artists_artist ON show_artists(artist_id);

CREATE INDEX IF NOT EXISTS idx_show_comments_show ON show_comments(show_id);
CREATE INDEX IF NOT EXISTS idx_show_comments_user ON show_comments(user_id);
CREATE INDEX IF NOT EXISTS idx_show_comments_parent ON show_comments(parent_id);

-- Artist relationships
CREATE INDEX IF NOT EXISTS idx_artist_songs_artist ON artist_songs(artist_id);
CREATE INDEX IF NOT EXISTS idx_artist_songs_song ON artist_songs(song_id);

CREATE INDEX IF NOT EXISTS idx_artist_stats_artist ON artist_stats(artist_id);

-- Email system indexes
CREATE INDEX IF NOT EXISTS idx_email_logs_user ON email_logs(user_id);
CREATE INDEX IF NOT EXISTS idx_email_logs_type ON email_logs(type);
CREATE INDEX IF NOT EXISTS idx_email_logs_sent_at ON email_logs(sent_at DESC);

CREATE INDEX IF NOT EXISTS idx_email_queue_user ON email_queue(user_id);
CREATE INDEX IF NOT EXISTS idx_email_queue_status ON email_queue(status);
CREATE INDEX IF NOT EXISTS idx_email_queue_scheduled ON email_queue(scheduled_at);

-- Analytics indexes
CREATE INDEX IF NOT EXISTS idx_search_analytics_user ON search_analytics(user_id);
CREATE INDEX IF NOT EXISTS idx_search_analytics_query ON search_analytics(query);
CREATE INDEX IF NOT EXISTS idx_search_analytics_created ON search_analytics(created_at DESC);

-- =====================================================
-- GRANT PERMISSIONS FOR SERVICE ROLE
-- =====================================================

-- Grant necessary permissions to service role for system operations
GRANT ALL ON ALL TABLES IN SCHEMA public TO service_role;
GRANT ALL ON ALL SEQUENCES IN SCHEMA public TO service_role;
GRANT ALL ON ALL FUNCTIONS IN SCHEMA public TO service_role;

-- =====================================================
-- COMMENTS FOR DOCUMENTATION
-- =====================================================

COMMENT ON POLICY "Public can view artists" ON artists IS 'Allow public read access to artist information';
COMMENT ON POLICY "Public can view shows" ON shows IS 'Allow public read access to show information';
COMMENT ON POLICY "Public can view venues" ON venues IS 'Allow public read access to venue information';
COMMENT ON POLICY "Users can view their own follows" ON user_follows_artists IS 'Users can only see their own artist follows for privacy';
COMMENT ON POLICY "Only admins can access admin notifications" ON admin_notifications IS 'Restrict admin notifications to admin users only';

-- =====================================================
-- VALIDATION QUERIES
-- =====================================================

-- Query to check all tables have RLS enabled
-- SELECT tablename, rowsecurity 
-- FROM pg_tables 
-- WHERE schemaname = 'public' 
-- AND rowsecurity = false
-- ORDER BY tablename;

-- Query to check policy coverage
-- SELECT 
--   t.tablename,
--   COUNT(p.policyname) as policy_count
-- FROM pg_tables t
-- LEFT JOIN pg_policies p ON t.tablename = p.tablename
-- WHERE t.schemaname = 'public'
-- GROUP BY t.tablename
-- ORDER BY policy_count, t.tablename;